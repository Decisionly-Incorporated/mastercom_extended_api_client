/**
 * Mastercom Extended API
 * The Mastercom Extended API consists of endpoints used by issuers and acquirers to manage Single Message System disputes.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ErrorWrapper } from '../model/errorWrapper';
import { Queue } from '../model/queue';
import { QueueDefinition } from '../model/queueDefinition';
import { QueueDefinitionsList } from '../model/queueDefinitionsList';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://dispute.mastercard.com/mastercom-extended';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum QueuesApiApiKeys {
}

export class QueuesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: QueuesApiApiKeys, value: string) {
        (this.authentications as any)[QueuesApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Issuers and acquirers use this endpoint to retrieve fields within a specific queue.
     * @summary Retrieve queue fields
     * @param queueId Identifier assigned by Mastercom to the queue, obtained from the &#x60;&#x60;&#x60;GET /queues&#x60;&#x60;&#x60; endpoint. 
     */
    public async getQueueDefinition (queueId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: QueueDefinition;  }> {
        const localVarPath = this.basePath + '/queues/{queue_id}'
            .replace('{' + 'queue_id' + '}', encodeURIComponent(String(queueId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'queueId' is not null or undefined
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling getQueueDefinition.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: QueueDefinition;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "QueueDefinition");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Issuers and acquirers use this endpoint to retrieve a list of queues and their fields.
     * @summary Retrieve list of queue fields
     * @param offset Specifies the number of items to offset the start of the list.
     * @param limit Number of items the list should be limited to.
     */
    public async getQueueList (offset?: number, limit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: QueueDefinitionsList;  }> {
        const localVarPath = this.basePath + '/queues';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: QueueDefinitionsList;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "QueueDefinitionsList");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Issuers and acquirers use this endpoint to retrieve a list of claims in a queue within a specified date range.  | Queue Name  | Queue ID    | Sort Key    | Sort Order  | Maximum Time Frame  | | ----------- | ----------- | ----------- | ----------- | -----------         | |Acquirer Collaboration Unworked | 1 | eventExpiryDateTime | ASC | Future 3 Days | |Acquirer First Chargeback Unworked | 11 | eventExpiryDateTime | ASC | Future 45 Days | |Acquirer Worked | 12 | eventLastUpdateDate | DESC | Past 45 Days | |Claims with No Activity | 19 | claimCreateDate | ASC | Past 46 Days | |Closed Claim | 5 | claimLastUpdatedDateTime | DESC | Past 30 Days | |Issuer Collaboration Unworked | 20 | eventExpiryDateTime | ASC | Future 3 Days | |Issuer Representment Unworked | 25 | eventExpiryDateTime | ASC | Future 45 Days | |Issuer Worked | 9 | eventLastUpdateDate | DESC | Past 45 Days | |Pending Documentation | 10 | eventExpiryDateTime | ASC | Future 45 Days | |Rejects | 8 | eventExpiryDateTime | ASC | Future 45 Days | | Sender Case Filing | 26 | caseId | DESC | N/A | | Receiver Case Filing | 27 | caseId | DESC | N/A | ||||||  To see details about the fields included in each queue, refer to the Tutorials and Guides section of the Mastercom Extended API Specifications. 
     * @summary Retrieve list of claims in a queue
     * @param queueId Identifier assigned by Mastercom to the queue, obtained from the &#x60;&#x60;&#x60;GET /queues&#x60;&#x60;&#x60; endpoint. 
     * @param startDateTime Beginning of search date and time range.
     * @param endDateTime Search date maximum range.
     * @param offset Specifies the number of items to offset the start of the list.
     * @param limit Number of items the list should be limited to.
     */
    public async queueSearch (queueId: string, startDateTime: Date, endDateTime: Date, offset?: number, limit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Queue;  }> {
        const localVarPath = this.basePath + '/queues/{queue_id}/claims'
            .replace('{' + 'queue_id' + '}', encodeURIComponent(String(queueId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'queueId' is not null or undefined
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling queueSearch.');
        }

        // verify required parameter 'startDateTime' is not null or undefined
        if (startDateTime === null || startDateTime === undefined) {
            throw new Error('Required parameter startDateTime was null or undefined when calling queueSearch.');
        }

        // verify required parameter 'endDateTime' is not null or undefined
        if (endDateTime === null || endDateTime === undefined) {
            throw new Error('Required parameter endDateTime was null or undefined when calling queueSearch.');
        }

        if (startDateTime !== undefined) {
            localVarQueryParameters['start_date_time'] = ObjectSerializer.serialize(startDateTime, "Date");
        }

        if (endDateTime !== undefined) {
            localVarQueryParameters['end_date_time'] = ObjectSerializer.serialize(endDateTime, "Date");
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Queue;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Queue");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
