/**
 * Mastercom Extended API
 * The Mastercom Extended API consists of endpoints used by issuers and acquirers to manage Single Message System disputes.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ArbitrationCaseCreate } from '../model/arbitrationCaseCreate';
import { CaseCreateCaseId } from '../model/caseCreateCaseId';
import { CaseDetails } from '../model/caseDetails';
import { CaseTakeActionArbitration } from '../model/caseTakeActionArbitration';
import { CaseTakeActionCompliance } from '../model/caseTakeActionCompliance';
import { ComplianceCaseCreate } from '../model/complianceCaseCreate';
import { ErrorWrapper } from '../model/errorWrapper';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://dispute.mastercard.com/mastercom-extended';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CaseFilingApiApiKeys {
}

export class CaseFilingApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: CaseFilingApiApiKeys, value: string) {
        (this.authentications as any)[CaseFilingApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Sender (issuers) use this endpoint to create a pre-arbitration or arbitration case.
     * @summary Create a new pre-arbitration or arbitration case
     * @param arbitrationCaseType Determines the type of case being created.  *Available values:* PRE_ARBITRATION, ARBITRATION 
     * @param arbitrationCaseCreate 
     */
    public async createPreArbOrArbCase (arbitrationCaseType: 'PRE_ARBITRATION' | 'ARBITRATION', arbitrationCaseCreate: ArbitrationCaseCreate, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CaseCreateCaseId;  }> {
        const localVarPath = this.basePath + '/cases/arbitrations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'arbitrationCaseType' is not null or undefined
        if (arbitrationCaseType === null || arbitrationCaseType === undefined) {
            throw new Error('Required parameter arbitrationCaseType was null or undefined when calling createPreArbOrArbCase.');
        }

        // verify required parameter 'arbitrationCaseCreate' is not null or undefined
        if (arbitrationCaseCreate === null || arbitrationCaseCreate === undefined) {
            throw new Error('Required parameter arbitrationCaseCreate was null or undefined when calling createPreArbOrArbCase.');
        }

        if (arbitrationCaseType !== undefined) {
            localVarQueryParameters['arbitration_case_type'] = ObjectSerializer.serialize(arbitrationCaseType, "'PRE_ARBITRATION' | 'ARBITRATION'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(arbitrationCaseCreate, "ArbitrationCaseCreate")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CaseCreateCaseId;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CaseCreateCaseId");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Senders use this endpoint to create a pre-compliance or compliance case.
     * @summary Create a new pre-compliance or compliance case
     * @param complianceCaseType Determines the type of case being created.  *Available values:* PRE_COMPLIANCE, COMPLIANCE 
     * @param complianceCaseCreate 
     */
    public async createPreCompOrCompCase (complianceCaseType: 'PRE_COMPLIANCE' | 'COMPLIANCE', complianceCaseCreate: ComplianceCaseCreate, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CaseCreateCaseId;  }> {
        const localVarPath = this.basePath + '/cases/compliances';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'complianceCaseType' is not null or undefined
        if (complianceCaseType === null || complianceCaseType === undefined) {
            throw new Error('Required parameter complianceCaseType was null or undefined when calling createPreCompOrCompCase.');
        }

        // verify required parameter 'complianceCaseCreate' is not null or undefined
        if (complianceCaseCreate === null || complianceCaseCreate === undefined) {
            throw new Error('Required parameter complianceCaseCreate was null or undefined when calling createPreCompOrCompCase.');
        }

        if (complianceCaseType !== undefined) {
            localVarQueryParameters['compliance_case_type'] = ObjectSerializer.serialize(complianceCaseType, "'PRE_COMPLIANCE' | 'COMPLIANCE'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(complianceCaseCreate, "ComplianceCaseCreate")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CaseCreateCaseId;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CaseCreateCaseId");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Senders and receivers use this endpoint to retrieve details for an existing case.
     * @summary Retrieve details for existing case
     * @param caseId Identifier assigned by Mastercom to the case, obtained from either the &#x60;&#x60;&#x60;POST /cases/arbitrations&#x60;&#x60;&#x60; or &#x60;&#x60;&#x60;POST /cases/compliances&#x60;&#x60;&#x60; endpoints.  *Valid Values/Format:* Numeric. 
     */
    public async retrieveCaseDetails (caseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CaseDetails;  }> {
        const localVarPath = this.basePath + '/cases/{case_id}'
            .replace('{' + 'case_id' + '}', encodeURIComponent(String(caseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling retrieveCaseDetails.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CaseDetails;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CaseDetails");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Senders (issuers) and receivers (acquirers) use this endpoint to update or respond to a pre-arbitration or arbitration case.
     * @summary Update or respond to a pre-arbitration or arbitration case
     * @param caseId Identifier assigned by Mastercom to the case, obtained from either the &#x60;&#x60;&#x60;POST /cases/arbitrations&#x60;&#x60;&#x60; or &#x60;&#x60;&#x60;POST /cases/compliances&#x60;&#x60;&#x60; endpoints.  *Valid Values/Format:* Numeric. 
     * @param caseTakeActionArbitration 
     */
    public async takeActionOnArbitrationCase (caseId: string, caseTakeActionArbitration: CaseTakeActionArbitration, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/cases/{case_id}/arbitrations'
            .replace('{' + 'case_id' + '}', encodeURIComponent(String(caseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling takeActionOnArbitrationCase.');
        }

        // verify required parameter 'caseTakeActionArbitration' is not null or undefined
        if (caseTakeActionArbitration === null || caseTakeActionArbitration === undefined) {
            throw new Error('Required parameter caseTakeActionArbitration was null or undefined when calling takeActionOnArbitrationCase.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(caseTakeActionArbitration, "CaseTakeActionArbitration")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Senders and receivers use this endpoint to update or respond to a pre-compliance or compliance case.
     * @summary Update or respond to a pre-compliance or compliance case
     * @param caseId Identifier assigned by Mastercom to the case, obtained from either the &#x60;&#x60;&#x60;POST /cases/arbitrations&#x60;&#x60;&#x60; or &#x60;&#x60;&#x60;POST /cases/compliances&#x60;&#x60;&#x60; endpoints.  *Valid Values/Format:* Numeric. 
     * @param caseTakeActionCompliance 
     */
    public async takeActionOnComplianceCase (caseId: string, caseTakeActionCompliance: CaseTakeActionCompliance, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/cases/{case_id}/compliances'
            .replace('{' + 'case_id' + '}', encodeURIComponent(String(caseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling takeActionOnComplianceCase.');
        }

        // verify required parameter 'caseTakeActionCompliance' is not null or undefined
        if (caseTakeActionCompliance === null || caseTakeActionCompliance === undefined) {
            throw new Error('Required parameter caseTakeActionCompliance was null or undefined when calling takeActionOnComplianceCase.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(caseTakeActionCompliance, "CaseTakeActionCompliance")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
