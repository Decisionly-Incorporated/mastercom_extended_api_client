/**
 * Mastercom Extended API
 * The Mastercom Extended API consists of endpoints used by issuers and acquirers to manage Single Message System disputes.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ChargebackSingleMessage } from './chargebackSingleMessage';

export class InitiateDispute {
    /**
    * When set to True, system creates a chargeback automatically when Collaboration is unsuccessful. When set to False, system takes no further action if Collaboration is unsuccessful.  NOTE: Parameter must be set to True at this time. 
    */
    'autoChargeback'?: boolean = true;
    /**
    * Only applicable to reason codes 60 and 75. Doubles the amount of the chargeback if set to True. Used for scenarios in which the merchant attempted to credit a cardholder but accidentally debited the cardholder a second time. 
    */
    'creditPostedAsPurchase'?: boolean = false;
    /**
    * Amount disputed, written without a decimal. Includes the exponent.  *Valid Values/Format:* Numeric 
    */
    'disputeAmount': string;
    /**
    * Reason code submitted for the chargeback.  *Valid Values/Format:* Numeric 
    */
    'reasonCode': string;
    /**
    * Specify TRUE if documentation is being attached or will be attached at a later time for this event. Otherwise, specify FALSE. 
    */
    'documentIndicator'?: boolean = false;
    /**
    * Additional information or note about the documentation. Credentials, card numbers, and similar sensitive information such as PCI or PII data should never be entered in this field.  *Valid Values/Format:* Alpha, numeric, and special characters. 
    */
    'documentMemo'?: string;
    /**
    * Identifier assigned by Mastercom to a document which is pending processing, obtained from the ```POST /documents``` endpoint. 
    */
    'documentUploadedId'?: string;
    /**
    * Card expiration date.  *Valid Values/Format:* Numeric (YYMM) 
    */
    'expirationDate'?: string;
    /**
    * Any additional information or note may be entered in this field. Credentials, card numbers, and similar sensitive information such as PCI or PII data should never be entered in this field.  *Valid Values/Format:* Alpha, numeric, and special characters 
    */
    'additionalInformation'?: string;
    'singleMessage'?: ChargebackSingleMessage;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "autoChargeback",
            "baseName": "autoChargeback",
            "type": "boolean"
        },
        {
            "name": "creditPostedAsPurchase",
            "baseName": "creditPostedAsPurchase",
            "type": "boolean"
        },
        {
            "name": "disputeAmount",
            "baseName": "disputeAmount",
            "type": "string"
        },
        {
            "name": "reasonCode",
            "baseName": "reasonCode",
            "type": "string"
        },
        {
            "name": "documentIndicator",
            "baseName": "documentIndicator",
            "type": "boolean"
        },
        {
            "name": "documentMemo",
            "baseName": "documentMemo",
            "type": "string"
        },
        {
            "name": "documentUploadedId",
            "baseName": "documentUploadedId",
            "type": "string"
        },
        {
            "name": "expirationDate",
            "baseName": "expirationDate",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "string"
        },
        {
            "name": "singleMessage",
            "baseName": "singleMessage",
            "type": "ChargebackSingleMessage"
        }    ];

    static getAttributeTypeMap() {
        return InitiateDispute.attributeTypeMap;
    }
}

