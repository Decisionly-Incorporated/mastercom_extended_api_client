/**
 * Mastercom Extended API
 * The Mastercom Extended API consists of endpoints used by issuers and acquirers to manage Single Message System disputes.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Contains information about an amount related to a specific event in the original transaction or dispute lifecycle.  Only one definition below applies to this specific amount object. Amounts are defined as follows:    **acquirerSettlementAmount** - Original completed amount of the transaction in local currency not including fees.    **cardholderBillingAmount** - First presentment amount converted to the cardholder billing amount, exclusive of Currency Conversion Assessment.    **caseDisputeAmount** - Amount disputed in the case, written without a decimal. Includes the exponent.    **cashBackAmount** - Amount of cash distributed on a first presentment with cash back transaction.    **collaborationAmount** - Amount credited to issuer from Collaboration.    **currencyConversionAssessmentAmount** - Amount calculated by the Single Message System that is the result of the currency conversion assessment being applied to qualifying transactions.    **disputeAmount** - Amount disputed, written without a decimal. Includes the exponent.    **issuerSettlementAmount** - Settlement amount displayed in the issuer\'s chosen settlement currency, as processed in the Single Message System.    **pointOfServiceAmount** - Displays the amount at the Point of Service.    **refundReversalAmount** - Amount refunded to the cardholder.    **replacementAmount** - The replacement amount for the original transaction.    **totalDisputeAmount** - The total amount under dispute. Consists of sum of multiple dispute amounts, if any exist for the claim.    **transactionAmount** - Amount of funds requested by the cardholder in the local currency of the acquirer or source location of the transaction. 
*/
export class AmountDetails {
    /**
    * Amount expressed in decimal format.
    */
    'displayAmount'?: string;
    /**
    * Amount to the left of the decimal.
    */
    'wholeAmount'?: string;
    /**
    * Decimal portion of the amount.
    */
    'decimalAmount'?: string;
    /**
    * The alphabetic code defining the currency of the amount.
    */
    'alphaCurrencyCodes'?: Array<string>;
    /**
    * Numeric code defining the currency of the amount.
    */
    'numericCurrencyCode'?: string;
    /**
    * Currency exponent associated to the currency code of the amount.
    */
    'currencyExponent'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "displayAmount",
            "baseName": "displayAmount",
            "type": "string"
        },
        {
            "name": "wholeAmount",
            "baseName": "wholeAmount",
            "type": "string"
        },
        {
            "name": "decimalAmount",
            "baseName": "decimalAmount",
            "type": "string"
        },
        {
            "name": "alphaCurrencyCodes",
            "baseName": "alphaCurrencyCodes",
            "type": "Array<string>"
        },
        {
            "name": "numericCurrencyCode",
            "baseName": "numericCurrencyCode",
            "type": "string"
        },
        {
            "name": "currencyExponent",
            "baseName": "currencyExponent",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AmountDetails.attributeTypeMap;
    }
}

